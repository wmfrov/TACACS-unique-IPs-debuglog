"""
script to parse TACACS.net clients.xml file and debug or other log file
to find how many unique IPs have connected and what IPs they are
"""

def list_of_clients(file):
    """
    import a clients.xml file and output a list of client IP addresses in the file
    argument: file location
    returns: list of IP addresses found in file
    note: currently only works with individual IP addresses in clients.xml, not ranges or regex
    """
    clientsfile = open(file, 'r')
    contents = clientsfile.readlines()
    items = []
    items2 = []
    for line in contents:
        line = line.strip()
        if line[0:8] == "<Client>":
            items.append(line[8:])
    for possible_client in items:
        counter = 0
        for char in possible_client:
            if char == "<":
                client_found = possible_client[:counter]
                if len(client_found) > 0:  
                    items2.append(possible_client[:counter])
                break
            else:
                counter = counter + 1
    clientsfile.close()
    return items2

def min_ip_length(list_of_ips):
    """
    Finds the length of the shortest IP address in your list of
    IPs in your clients file.
    Used later to skip checking lines in the log if they're not
    at least as long as your shortest IP address
    """
    length_check = len(list_of_ips[0])
    for item in list_of_ips:
        if len(item) < length_check and len(item) > 1:
            length_check = len(item)
    return length_check

def log(file):
    """
    Opens a debug or other log file and returns a list. Each
    item in the list is one line of the log file.
    argument: file location
    returns: list of lines in the log file
    """
    logfile = open(file, 'r')
    content = logfile.readlines()

    logfile.close()
    return content

def find_ip(logfile, client_list, ip_length_min):
    """
    Parses a log file to see if a matching IP address is found.
    Uses a list of potential IP matches generated by list_of_clients
    function.
    If a matching client is found in the log it is counted and returned
    in the output.
    Output is printed to terminal.
    Arguments:
    list of lines from a log file (generated by log function)
    list of potential client IPs (generated by list_of_clients function)
    length of shortest IP address in client IP list (generated from min_ip_length function)
    """
    unique_ips = 0
    ip_list = []
    ip_output = ""

    for line in logfile:
        if len(line) > ip_length_min:
            for client in client_list:
                if client in line and client not in ip_list:
                    ip_list.append(client)
                    unique_ips = unique_ips + 1
    for ip_address in ip_list:
        ip_output = ip_output + ip_address + "\n"
    output = "Number of unique IP addresses found in log file: " + str(unique_ips) \
        + "\n" + "Unique IP addresses found:" + "\n" + ip_output
    print(output)

def main(client_file, log_file):
    """
    Calls all other functions
    arguments: clients.xml file pathway, log file pathway
    """
    clients_list = list_of_clients(client_file)
    min_length = min_ip_length(clients_list)
    log_file = log(log_file)
    find_ip(log_file, clients_list, min_length)

main("clients.xml", "Debug.log")
